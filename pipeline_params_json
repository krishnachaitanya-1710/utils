import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Base64;

@Service
public class JenkinsPipelineParameterFetcher {

    private final RestTemplate restTemplate = new RestTemplate();
    private final String jenkinsBaseUrl = "http://your-jenkins-url/job/";

    // Use RestTemplate to fetch Jenkins job details in JSON format
    public JSONObject fetchJenkinsJobJson(String jobUrl) throws Exception {
        String jsonUrl = jobUrl + "/api/json";
        
        // Set up headers for Basic Auth
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Basic " + getJenkinsCredentials());
        HttpEntity<String> entity = new HttpEntity<>(headers);
        
        // Fetch the job JSON using RestTemplate
        ResponseEntity<String> response = restTemplate.exchange(jsonUrl, HttpMethod.GET, entity, String.class);
        
        // Convert the response body into a JSONObject
        return new JSONObject(response.getBody());
    }

    // Use RestTemplate to fetch Jenkins console log for a specific build
    public String fetchJenkinsConsoleLog(String jobUrl, String buildNumber) throws Exception {
        String consoleUrl = jobUrl + "/" + buildNumber + "/consoleText";
        
        // Set up headers for Basic Auth
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Basic " + getJenkinsCredentials());
        HttpEntity<String> entity = new HttpEntity<>(headers);

        // Fetch the console log using RestTemplate
        ResponseEntity<String> response = restTemplate.exchange(consoleUrl, HttpMethod.GET, entity, String.class);

        return response.getBody();
    }

    // Parse parameters from the Jenkins job JSON
    public JSONObject parsePipelineParameters(JSONObject jobJson) {
        JSONObject paramsJson = new JSONObject();

        // Get the 'property' field from the job JSON which contains parameter definitions
        JSONArray properties = jobJson.getJSONArray("property");

        for (int i = 0; i < properties.length(); i++) {
            JSONObject property = properties.getJSONObject(i);
            if (property.has("parameterDefinitions")) {
                JSONArray parameterDefinitions = property.getJSONArray("parameterDefinitions");

                for (int j = 0; j < parameterDefinitions.length(); j++) {
                    JSONObject param = parameterDefinitions.getJSONObject(j);
                    String paramName = param.getString("name");
                    String defaultValue = param.has("defaultParameterValue") 
                                          ? param.getJSONObject("defaultParameterValue").getString("value") 
                                          : "";
                    paramsJson.put(paramName, defaultValue);
                }
            }
        }
        return paramsJson;
    }

    // Method to extract ddp_repo_url and ddp_repo_revision based on the pipeline type
    public JSONObject getPipelineParameters(String pipelineUrl, String pipelineType, String buildNumber) throws Exception {
        JSONObject response = new JSONObject();

        switch (pipelineType) {
            case "packaging":
                // Get parameters directly from the job JSON
                JSONObject jobJson = fetchJenkinsJobJson(pipelineUrl);
                response = parsePipelineParameters(jobJson);
                break;

            case "deployment":
                // Fetch packaging job parameters if available
                JSONObject deploymentJobJson = fetchJenkinsJobJson(pipelineUrl);
                JSONObject deploymentParams = parsePipelineParameters(deploymentJobJson);

                if (deploymentParams.has("packagingJobUrl")) {
                    String packagingJobUrl = deploymentParams.getString("packagingJobUrl");
                    JSONObject packagingJobJson = fetchJenkinsJobJson(packagingJobUrl);
                    response = parsePipelineParameters(packagingJobJson);
                }
                break;

            case "release_candidate_packaging":
                // Fetch parameters from packaging job info in console log
                String consoleLog = fetchJenkinsConsoleLog(pipelineUrl, buildNumber);
                String packagingJobUrl = extractPackagingJobUrlFromConsoleLog(consoleLog);
                
                if (packagingJobUrl != null) {
                    JSONObject packagingJobJson = fetchJenkinsJobJson(packagingJobUrl);
                    response = parsePipelineParameters(packagingJobJson);
                }
                break;

            default:
                throw new Exception("Unknown pipeline type");
        }

        return response;
    }

    // Method to extract packaging job URL from console log
    public String extractPackagingJobUrlFromConsoleLog(String consoleLog) {
        // Assume console log contains a line with the packaging job URL in a recognizable format
        String[] logLines = consoleLog.split("\n");
        for (String line : logLines) {
            if (line.contains("Packaging Job URL:")) {
                return line.split("Packaging Job URL:")[1].trim();
            }
        }
        return null;
    }

    // Encode Jenkins credentials (username:token) into Base64 for Basic Auth
    private String getJenkinsCredentials() {
        String user = "your-jenkins-username";
        String token = "your-jenkins-api-token";
        return Base64.getEncoder().encodeToString((user + ":" + token).getBytes());
    }

    public static void main(String[] args) {
        try {
            JenkinsPipelineParameterFetcher fetcher = new JenkinsPipelineParameterFetcher();
            JSONObject result = fetcher.getPipelineParameters("http://your-jenkins-url/job/your-job-name", "packaging", "latest");

            System.out.println(result.toString(2));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
